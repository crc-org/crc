// automatically generated by stateify.

//go:build arm || mips || mipsle || 386
// +build arm mips mipsle 386

package atomicbitops

import (
	"gvisor.dev/gvisor/pkg/state"
)

func (aa *AlignedAtomicInt64) StateTypeName() string {
	return "pkg/atomicbitops.AlignedAtomicInt64"
}

func (aa *AlignedAtomicInt64) StateFields() []string {
	return []string{
		"value",
		"value32",
	}
}

func (aa *AlignedAtomicInt64) beforeSave() {}

// +checklocksignore
func (aa *AlignedAtomicInt64) StateSave(stateSinkObject state.Sink) {
	aa.beforeSave()
	stateSinkObject.Save(0, &aa.value)
	stateSinkObject.Save(1, &aa.value32)
}

func (aa *AlignedAtomicInt64) afterLoad() {}

// +checklocksignore
func (aa *AlignedAtomicInt64) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &aa.value)
	stateSourceObject.Load(1, &aa.value32)
}

func (aa *AlignedAtomicUint64) StateTypeName() string {
	return "pkg/atomicbitops.AlignedAtomicUint64"
}

func (aa *AlignedAtomicUint64) StateFields() []string {
	return []string{
		"value",
		"value32",
	}
}

func (aa *AlignedAtomicUint64) beforeSave() {}

// +checklocksignore
func (aa *AlignedAtomicUint64) StateSave(stateSinkObject state.Sink) {
	aa.beforeSave()
	stateSinkObject.Save(0, &aa.value)
	stateSinkObject.Save(1, &aa.value32)
}

func (aa *AlignedAtomicUint64) afterLoad() {}

// +checklocksignore
func (aa *AlignedAtomicUint64) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &aa.value)
	stateSourceObject.Load(1, &aa.value32)
}

func init() {
	state.Register((*AlignedAtomicInt64)(nil))
	state.Register((*AlignedAtomicUint64)(nil))
}
