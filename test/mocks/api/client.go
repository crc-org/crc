// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	client "github.com/code-ready/crc/pkg/crc/api/client"
	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// Delete provides a mock function with given fields:
func (_m *Client) Delete() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetConfig provides a mock function with given fields: configs
func (_m *Client) GetConfig(configs []string) (client.GetConfigResult, error) {
	ret := _m.Called(configs)

	var r0 client.GetConfigResult
	if rf, ok := ret.Get(0).(func([]string) client.GetConfigResult); ok {
		r0 = rf(configs)
	} else {
		r0 = ret.Get(0).(client.GetConfigResult)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(configs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsPullSecretDefined provides a mock function with given fields:
func (_m *Client) IsPullSecretDefined() (bool, error) {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetConfig provides a mock function with given fields: configs
func (_m *Client) SetConfig(configs client.SetConfigRequest) (client.SetOrUnsetConfigResult, error) {
	ret := _m.Called(configs)

	var r0 client.SetOrUnsetConfigResult
	if rf, ok := ret.Get(0).(func(client.SetConfigRequest) client.SetOrUnsetConfigResult); ok {
		r0 = rf(configs)
	} else {
		r0 = ret.Get(0).(client.SetOrUnsetConfigResult)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(client.SetConfigRequest) error); ok {
		r1 = rf(configs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetPullSecret provides a mock function with given fields: data
func (_m *Client) SetPullSecret(data string) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Start provides a mock function with given fields: config
func (_m *Client) Start(config client.StartConfig) (client.StartResult, error) {
	ret := _m.Called(config)

	var r0 client.StartResult
	if rf, ok := ret.Get(0).(func(client.StartConfig) client.StartResult); ok {
		r0 = rf(config)
	} else {
		r0 = ret.Get(0).(client.StartResult)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(client.StartConfig) error); ok {
		r1 = rf(config)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Status provides a mock function with given fields:
func (_m *Client) Status() (client.ClusterStatusResult, error) {
	ret := _m.Called()

	var r0 client.ClusterStatusResult
	if rf, ok := ret.Get(0).(func() client.ClusterStatusResult); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(client.ClusterStatusResult)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Stop provides a mock function with given fields:
func (_m *Client) Stop() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Telemetry provides a mock function with given fields: action
func (_m *Client) Telemetry(action string) error {
	ret := _m.Called(action)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(action)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnsetConfig provides a mock function with given fields: configs
func (_m *Client) UnsetConfig(configs []string) (client.SetOrUnsetConfigResult, error) {
	ret := _m.Called(configs)

	var r0 client.SetOrUnsetConfigResult
	if rf, ok := ret.Get(0).(func([]string) client.SetOrUnsetConfigResult); ok {
		r0 = rf(configs)
	} else {
		r0 = ret.Get(0).(client.SetOrUnsetConfigResult)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(configs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Version provides a mock function with given fields:
func (_m *Client) Version() (client.VersionResult, error) {
	ret := _m.Called()

	var r0 client.VersionResult
	if rf, ok := ret.Get(0).(func() client.VersionResult); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(client.VersionResult)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WebconsoleURL provides a mock function with given fields:
func (_m *Client) WebconsoleURL() (client.ConsoleResult, error) {
	ret := _m.Called()

	var r0 client.ConsoleResult
	if rf, ok := ret.Get(0).(func() client.ConsoleResult); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(client.ConsoleResult)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClient(t mockConstructorTestingTNewClient) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
